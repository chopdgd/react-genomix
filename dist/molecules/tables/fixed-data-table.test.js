import _extends from"@babel/runtime/helpers/esm/extends";import React from"react";import ReactDOM from"react-dom";import{Cell,Column}from"fixed-data-table-2";import{shallow}from"enzyme";import{FixedDataTable,TextFixedCell}from"../../index";var list=Array.from([,],function(){return{name:"Mike",text:"text"}}),initialColumnOrder=["name","text"],nextColumnOrder=["text","name"],initialColumnSizes={name:50,text:100},nextColumnSizes={name:150,text:200},TestTable=function(a){var b=_extends({},a);return React.createElement(FixedDataTable,{rowsCount:b.data.length,maxHeight:500,headerHeight:100,rowHeight:100,columnOrder:initialColumnOrder,onColumnReorder:b.onColumnReorder,columnWidths:initialColumnSizes,onColumnResize:b.onColumnResize,fixedColumns:b.fixedColumns},React.createElement(Column,{header:React.createElement(Cell,null,"Header"),cell:React.createElement(TextFixedCell,{data:b.data}),columnKey:"name",width:100}),React.createElement(Column,{header:React.createElement(Cell,null,"Header"),cell:React.createElement(TextFixedCell,{data:b.data}),columnKey:"text",width:100}))};describe("Test BigDataTable",function(){it("renders without crashing",function(){var a=document.createElement("div");ReactDOM.render(TestTable({data:list}),a)}),it("renders AutoSizer",function(){var a=shallow(TestTable({data:list}));expect(a.find("AutoSizer")).toHaveLength(1)}),it("columnOrder should change when given new props",function(){var a=shallow(TestTable({data:list}));expect(a.instance().state.columnOrder).toEqual(initialColumnOrder),a.setProps({columnOrder:nextColumnOrder}),expect(a.instance().state.columnOrder).toEqual(nextColumnOrder)}),it("columnWidths should change when given new props",function(){var a=shallow(TestTable({data:list}));expect(a.instance().state.columnWidths).toEqual(initialColumnSizes),a.setProps({columnWidths:nextColumnSizes}),expect(a.instance().state.columnWidths).toEqual(nextColumnSizes)}),it("columnWidths should change when onColumnResizeEndCallback is fired",function(){var a=jest.fn(),b=shallow(TestTable({data:list,onColumnResize:a})),c=b.instance(),d=jest.spyOn(c,"setState");expect(b.state().columnWidths).toEqual({name:50,text:100}),c.onColumnResizeEndCallback(10,"name"),expect(d).toHaveBeenCalledWith({columnWidths:{name:10,text:100}}),expect(a).toHaveBeenCalledTimes(1)}),it("columnOrder should change when onColumnReorderEndCallback is fired",function(){var a=jest.fn(),b=shallow(TestTable({data:list,onColumnReorder:a})),c=b.instance(),d=jest.spyOn(c,"setState");c.onColumnReorderEndCallback({reorderColumn:"name"}),expect(d).toHaveBeenCalledWith({columnOrder:["text","name"]}),c.onColumnReorderEndCallback({reorderColumn:"text"}),expect(d).toHaveBeenCalledWith({columnOrder:["text","name"]}),expect(a).toHaveBeenCalledTimes(2)}),it("columnOrder should not change when onColumnReorderEndCallback is fired with columnAfter",function(){var a=shallow(TestTable({data:list})),b=a.instance(),c=jest.spyOn(b,"setState");expect(a.state().columnOrder).toEqual(initialColumnOrder),b.onColumnReorderEndCallback({reorderColumn:"name",columnAfter:"text"}),expect(c).toHaveBeenCalledWith({columnOrder:initialColumnOrder})})});