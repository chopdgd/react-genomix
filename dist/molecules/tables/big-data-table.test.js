import _extends from"@babel/runtime/helpers/esm/extends";import React from"react";import ReactDOM from"react-dom";import{Column}from"react-virtualized";import{mount}from"enzyme";import{BigDataTable}from"../../index";var list=Array.from([,],function(){return{name:"Mike",description:"Cool"}}),TestTable=function(a){var b=_extends({},a);return React.createElement(BigDataTable,{data:b.data},React.createElement(Column,{label:"Name",dataKey:"name",height:500,width:100}))};describe("Test BigDataTable",function(){it("BigDataTable renders without crashing",function(){var a=document.createElement("div");ReactDOM.render(TestTable(),a)}),it("BigDataTable initial props are set correctly",function(){var a=mount(TestTable({data:list}));expect(a.find("BigDataTable").props().data).toEqual([{name:"Mike",description:"Cool"}]),expect(a.find("BigDataTable").props().height).toEqual(500),expect(a.find("BigDataTable").props().headerHeight).toEqual(40),expect(a.find("BigDataTable").props().headerTextAlign).toEqual("center"),expect(a.find("BigDataTable").props().rowHeight).toEqual(40),expect(a.find("BigDataTable").props().rowTextAlign).toEqual("left"),expect(a.find("BigDataTable").props().scrollToIndex).toEqual(-1),expect(a.find("Table").props().className).toEqual("genomix big-data table"),expect(a.find("Table").props().height).toEqual(500),expect(a.find("Table").props().width).toEqual(0),expect(a.find("Table").props().headerClassName).toEqual("header col"),expect(a.find("Table").props().headerHeight).toEqual(40),expect(a.find("Table").props().rowHeight).toEqual(40),expect(a.find("Table").props().rowCount).toEqual(1),expect(a.find("Table").props().scrollToIndex).toEqual(-1)}),it("BigDataTable defaultValues state are set correctly",function(){var a=mount(TestTable({data:list}));expect(a.state().rows).toEqual([{name:"Mike",description:"Cool"}])}),it("BigDataTable defaultValues state are set correctly",function(){var a=mount(TestTable({data:list}));expect(a.state().rows).toEqual([{name:"Mike",description:"Cool"}])}),it("BigDataTable loading state is correctly set when componentWillReceiveProps is fired",function(){var a=mount(TestTable({data:list}));expect(a.state().loading).toEqual(!1),a.setProps({loading:!0}),expect(a.state().loading).toEqual(!0)}),it("BigDataTable data state does not change componentWillReceiveProps is fired with the same data",function(){var a=mount(TestTable({data:list}));expect(a.state().rows).toEqual([{name:"Mike",description:"Cool"}]),a.setProps({data:[{name:"Mike",description:"Cool"}]}),expect(a.state().rows).toEqual([{name:"Mike",description:"Cool"}])}),it("BigDataTable data state loads new data when componentWillReceiveProps is fired with more data",function(){var a=mount(TestTable({data:list}));expect(a.state().rows).toEqual([{name:"Mike",description:"Cool"}]),a.setProps({data:[{name:"Mike2",description:"Cool"}]}),expect(a.state().rows).toEqual([{name:"Mike",description:"Cool"},{name:"Mike2",description:"Cool"}])}),it("BigDataTable data state only loads new data when componentWillReceiveProps is fired with more data",function(){var a=mount(TestTable({data:list}));expect(a.state().rows).toEqual([{name:"Mike",description:"Cool"}]),a.setProps({data:[{name:"Mike",description:"Cool"},{name:"Mike2",description:"Cool"}]}),expect(a.state().rows).toEqual([{name:"Mike",description:"Cool"},{name:"Mike2",description:"Cool"}])}),it("Table noRowsRenderer renders expected content",function(){var a=mount(TestTable()),b=a.find("Table").prop("noRowsRenderer")();expect(b).toEqual(React.createElement("h1",{className:"no rows"},"No rows!"))}),it("Table rowClassName renders expected content",function(){var a=mount(TestTable()),b=a.find("Table").prop("rowClassName")({index:-1});expect(b).toEqual("header row center");var c=a.find("Table").prop("rowClassName")({index:1});expect(c).toEqual("odd row left");var d=a.find("Table").prop("rowClassName")({index:2});expect(d).toEqual("even row left")}),it("Table rowGetter renders expected content",function(){var a=mount(TestTable({data:list})),b=a.find("Table").prop("rowGetter")({index:0});expect(b).toEqual({name:"Mike",description:"Cool"})})});